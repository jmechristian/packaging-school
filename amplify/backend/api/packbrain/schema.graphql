type LessonSource @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  link: String
  position: Int!
}

type LessonLink @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  link: String
}

type Tags @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tag: String! @index(name: "tagByTag")
  lesson: [Lesson] @manyToMany(relationName: "LessonTags")
}

enum ModuleType {
  LESSON
  LOTM
  MICROLESSON
  REGULATORY
  ARTICLE
}

enum CategoryType {
  MATERIALS
  INDUSTRY
  FOODANDBEVERAGE
  BUSINESS
  SUPPLYCHAIN
  DESIGN
  AUTO
}

enum MediaType {
  VIDEO
  IMAGE
  SLIDES
}

type Certificate @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "certificateByTitle")
  title: String!
  title_callout_1: String
  title_callout_2: String
  title_text: String
  title_button_1_text: String
  title_button_1_link: String
  title_button_2_text: String
  title_button_2_link: String
  title_image: String
  courses: [Course] @manyToMany(relationName: "CertificateCourses")
  whoText: String
  courses_total: Int
  hours_total: Int
  ceus_total: Int
  brochure_link: String
  video: String
  price_full: Int
  price_monthly: Int
  price_features: [String]
  lmsLink: String
  demoLink: String
}

type Course @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "courseBySlug")
  category: CategoryType!
  title: String!
  subhead: String
  media: String
  video: String
  hour: Int
  lessons: Int
  videos: Int
  price: Int
  articles: [Article] @manyToMany(relationName: "ArticleRelatedCourses")
  certificate: [Certificate] @manyToMany(relationName: "CertificateCourses")
}

type Lesson @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "lessonsByTitle")
  title: String!
  subhead: String
  type: ModuleType
  media: String
  mediaType: MediaType
  slides: [String]
  seoImage: String
  content: String
  sources: [LessonSource] @hasMany
  links: [LessonLink] @hasMany
  tags: [Tags] @manyToMany(relationName: "LessonTags")
  objectives: [String]
  actionCTA: String
  actionSubhead: String
  actionLink: String
  actionLinkTitle: String
  actionExample: String
  author: [String]
  status: String @default(value: "DRAFT")
  related: [String]
  featured: String
  backdate: String
  createdBy: String
  lastEditedBy: String
  videoLink: String
  screengrab: String
}

type Author @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  headshot: String
  linkedIn: String
  title: String
  company: String
  templates: [IndexTemplate] @manyToMany(relationName: "AuthorTemplates")
  # lessons: [Lesson] @manyToMany(relationName: "AuthorLessons")
}

type Blog @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "blogBySlug")
  title: String!
  media: String
  content: String!
  author: String
  tags: [String]
  date: String
}

type Article @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "aticlesByTitle")
  title: String!
  subhead: String
  media: String
  seoImage: String
  content: String
  tags: [String]
  relatedCourses: [Course] @manyToMany(relationName: "ArticleRelatedCourses")
}

type DayInLifeItem @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  desc: String!
  icon: String
}

type Career @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "careerByTitle")
  title: String!
  altName: String
  subhead: String
  media: String
  dayInLife: [DayInLifeItem] @hasMany
  cmpmCopy: String
  cpsCopy: String
  apcCopy: String
  coreCopy: String
  electiveCopy: String
  freeCopy: String
  beverageCopy: String
}

# Autopack Summit

type APS @model @auth(rules: [{ allow: public }]) {
  id: ID!
  Registrants: [User] @manyToMany(relationName: "APSUser")
  Sponsors: [Company] @manyToMany(relationName: "APSSponsor")
  Speakers: [APSSpeaker] @hasMany
  year: Int!
  codes: [RegistrationCode]
}

type APSRegistrant @model @auth(rules: [{ allow: public }]) {
  year: String @default(value: "2024")
  id: ID!
  name: String!
  email: String! @index(name: "apsRegistrantByEmail")
  company: String!
  title: String!
  phone: String!
  code: String
  worksWith: String
  speedNetworking: String
  innovationWorkshop: String
  plantTour: String
  codeRequested: Boolean
  codeSent: Boolean
  registrationReceived: Boolean
  welcomeEmailSent: Boolean
}

type APSTicketRegistrant @model @auth(rules: [{ allow: public }]) {
  year: String @default(value: "2024")
  id: ID!
  name: String!
  email: String! @index(name: "apsTicketRegistrantByEmail")
  company: String!
  title: String!
  phone: String!
  worksWith: String
  speedNetworking: String
  innovationWorkshop: String
  plantTour: String
  registrationReceived: Boolean
  welcomeEmailSent: Boolean
  code: String @default(value: "TICKET")
}

type APSSpeaker2024 @model @auth(rules: [{ allow: public }]) {
  firstName: String!
  lastName: String!
  email: String!
  company: String!
  title: String!
  phone: String
  linkedin: String
  bio: String!
  presentationTitle: String
  presentationSummary: String
  headshot: String!
  mediaConsent: Boolean
  privacyConsent: Boolean
}

type APSTicket @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  phone: String!
  paymentConfirmation: String
}

type RegistrationCode {
  code: String
}

type Tourist @model @auth(rules: [{ allow: public }]) {
  id: ID!
  fullName: String!
  email: String! @index(name: "touristByEmail")
  phone: String!
  tour: String!
  company: String!
}

type AddOnRegistrant @model @auth(rules: [{ allow: public }]) {
  id: ID!
  fullName: String!
  email: String! @index(name: "addOnRegistrantByEmail")
  tour: String!
  company: String!
}

type Company @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  Employees: [User] @hasMany(indexName: "userByCompany", fields: ["id"])
  website: String
  email: String
  phone: String
  street_1: String
  street_2: String
  city: String
  state: String
  zip: String
  apsID: [APS] @manyToMany(relationName: "APSSponsor")
}

type APSSpeaker @model @auth(rules: [{ allow: public }]) {
  firstName: String!
  lastName: String!
  email: String!
  company: String!
  title: String!
  phone: String
  linkedin: String
  bio: String!
  presentationTitle: String
  presentationSummary: String
  headshot: String!
  mediaConsent: Boolean
  privacyConsent: Boolean
  apsHistory: APS @belongsTo
}

type MorrisetteForm @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  preference: String!
  approved: Boolean!
}

type AristosForm @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  approved: Boolean!
}

type GuardianForm @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  approved: Boolean!
}

type SurgereForm @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  approved: Boolean!
}

type BoschForm @model @auth(rules: [{ allow: public }]) {
  name: String!
  email: String!
  company: String!
  title: String!
  topicOne: Boolean
  topicTwo: Boolean
  topicThree: Boolean
  topicFour: Boolean
  approved: Boolean!
}

# User //////////

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String! @index(name: "userByName")
  title: String
  company: String
  email: String! @index(name: "userByEmail")
  office: String
  bio: String
  cell: String
  picture: String
  linkedin: String
  companyID: ID @index(name: "userByCompany")
  apss: [APS] @manyToMany(relationName: "APSUser")
  cmpmFormID: ID
  cmpmForm: CMPMForm @hasOne(fields: ["cmpmFormID"])
  cpsFormID: ID
  cpsForm: CPSForm @hasOne(fields: ["cpsFormID"])
  instructorId: Instructor @hasOne
  studentId: Student @hasOne
  savedCourses: [String]
  savedLessons: [String]
  savedArticles: [String]
  source: String
}

type CMPMSession @model @auth(rules: [{ allow: public }]) {
  startDate: String!
  endDate: String! @index(name: "cmpmSessionByEndDate")
  deadline: String! @index(name: "cmpmSessionByDeadline")
  title: String!
}

type CMPMForm
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: public }]) {
  id: ID!
  user: User @belongsTo
  firstName: String
  lastName: String
  email: String
  phone: String
  streetAddress: String
  addressExtra: String
  city: String
  state: String
  country: String
  companyName: String
  companyTitle: String
  linkedin: String
  background: String
  whyPackaging: String
  areaOfInterest: String
  sessionApplying: String
  referral: String
  payment: String
  yearGoals: String
  cmpmGoals: String
  moreAboutYou: String
  birthYear: String
  optOut: Boolean
  paymentConfirmation: String
  status: String @default(value: "DRAFT")
}

type CPSForm
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: public }]) {
  id: ID!
  user: User @belongsTo
  firstName: String
  lastName: String
  email: String
  phone: String
  streetAddress: String
  addressExtra: String
  city: String
  state: String
  country: String
  birthYear: String
  companyName: String
  companyTitle: String
  linkedin: String
  background: String
  whyPackaging: String
  areaOfInterest: String
  sessionApplying: String
  referral: String
  payment: String
  yearGoals: String
  cpsGoals: String
  moreAboutYou: String
  elective: String
  optOut: Boolean
  paymentConfirmation: String
  status: String @default(value: "DRAFT")
}

type AppStart
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: public }]) {
  firstName: String!
  lastName: String!
  email: String! @index(name: "appStartByEmail")
  phone: String
  source: String
  sourceUrl: String
}

type ApplicationStart @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey(sortKeyFields: ["createdAt"])
  createdAt: String!
  firstName: String!
  lastName: String!
  email: String! @index(name: "applicationStartByEmail")
  phone: String
  source: String
  sourceUrl: String
}

type CertAppStart @model @auth(rules: [{ allow: public }]) {
  id: ID!
  type: String!
    @index(name: "certAppStartByType", sortKeyFields: ["createdAt"])
    @default(value: "APP_START")
  createdAt: String!
  firstName: String!
  lastName: String!
  email: String! @index(name: "certAppStartByEmail")
  phone: String
  source: String
  sourceUrl: String
  country: String
  ipAddress: String
}

######### LMS #########

type LMSCollection @model @auth(rules: [{ allow: public }]) {
  id: ID!
  description: String
  title: String!
  subtitle: String
  instructor: String
  instructorImage: String
  instructorDescription: String
  instructorLink: String
  courses: [String]
  hours: String
  price: Int
  slug: String! @index(name: "LMScollectionBySlug")
  category: CategoryType @default(value: "INDUSTRY")
  collectionId: String
  lmsLink: String
}

type LMSCirriculum @model @auth(rules: [{ allow: public }]) {
  id: ID!
  shorthand: String
  title: String
  slug: String
  description: String
  Courses: [LMSCourse] @manyToMany(relationName: "CirriculumCourses")
}

type LMSCourse @model @auth(rules: [{ allow: public }]) {
  id: ID!
  courseId: String
  category: CategoryType @default(value: "MATERIALS")
  categoryArray: [String]
  type: String
  cirriculum: [LMSCirriculum] @manyToMany(relationName: "CirriculumCourses")
  lmsLessons: [LMSLesson] @manyToMany(relationName: "CourseLessons")
  instructors: [Instructor] @manyToMany(relationName: "CourseInstructors")
  price: String
  hours: String
  lessons: String
  videos: String
  preview: String
  seoImage: String
  infoSheet: String
  title: String
  subheadline: String
  what_learned: String
  objectives: [String]
  link: String
  trial_link: String
  percentComplete: Int
  slug: String! @index(name: "LMScourseBySlug")
  collection: [String]
  demo: Boolean @default(value: "false")
  partOf: [String]
  altLink: String
  shortDescription: String
  subscriptionLink: String
  subscriptionPrice: String
}

type LMSLesson @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  course: [LMSCourse] @manyToMany(relationName: "CourseLessons")
  modules: [LMSModule] @hasMany
  subheadline: String
  objectives: [String]
  media: String
  percentComplete: Int
  content: String
  slug: String! @index(name: "LMSLessonBySlug")
}

type LMSModule @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  lesson: LMSLesson @belongsTo
  subheadline: String
  objectives: [String]
  mediaType: MediaType
  slides: [Slide] @hasMany
  media: String
  quiz: LMSQuiz @hasOne
  content: String
  slug: String! @index(name: "LMSModuleBySlug")
}

type LMSQuiz @model @auth(rules: [{ allow: public }]) {
  id: ID!
  module: LMSModule @belongsTo
  prompt: String
  answer1: String
  answer2: String
  answer3: String
  answer4: String
  correctAnswer: String
}

type Student @model @auth(rules: [{ allow: public }]) {
  id: ID!
  studentId: ID
  student: User @belongsTo(fields: ["studentId"])
  courseEnrolled: [LMSCourse] @hasMany
}

type Instructor @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: ID
  instructor: User! @belongsTo(fields: ["userId"])
  coursesTaught: [LMSCourse] @manyToMany(relationName: "CourseInstructors")
}

type Objective @model @auth(rules: [{ allow: public }]) {
  id: ID!
  objective: String!
  completed: Boolean
}

type Slide @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slideSource: String!
  description: String
}

# type LessonVideo @model @auth(rules: [{ allow: public }]) {
#   id: ID!
#   timestamps: [Timestamp] @hasMany
#   lessonId: ID
#   lesson: LMSLesson @belongsTo(fields: ["lessonId"])
# }

type Timestamp @model @auth(rules: [{ allow: public }]) {
  id: ID!
  time: String!
  description: String
}

######### Staff #########

type Staff @model @auth(rules: [{ allow: public }]) {
  id: ID!
  fullName: String!
  title: String!
  image: String!
  linkedIn: String
}

######### Library #########

######### Customer #########

type TrackedCourse @model @auth(rules: [{ allow: public }]) {
  id: ID!
  courseId: String!
  clicks: Int!
  customer: Customer @belongsTo(fields: ["customerId"])
  customerId: ID! @index(name: "trackedByCustomer", sortKeyFields: ["clicks"])
}

type IncludedCourse @model @auth(rules: [{ allow: public }]) {
  id: ID!
  courseId: String!
  customer: Customer @belongsTo(fields: ["customerId"])
  customerId: ID! @index(name: "includedCourseByCustomer")
}

type Customer @model @auth(rules: [{ allow: public }]) {
  id: ID!
  displayName: String!
  link: String
  logo: String
  email: String
  primaryColor: String
  highlightColor: String
  pdf: String
  slide: String
  video: String
  offered: [String]
  pscourses: [IncludedCourse]
    @hasMany(indexName: "includedCourseByCustomer", fields: ["id"])
  courses: [TrackedCourse]
    @hasMany(indexName: "trackedByCustomer", fields: ["id"])
  offerings: [String]
  status: String @default(value: "DRAFT")
}

type CustomerLibary @model @auth(rules: [{ allow: public }]) {
  id: ID!
  displayName: String!
  slug: String! @index(name: "libraryBySlug")
  description: String
  link: String
  logo: String
  email: String
  primaryColor: String
  highlightColor: String
  pdf: String
  slide: String
  video: String
  clientCourses: [String]
  pschoolCourses: [String]
  addOns: [String]
  status: String @default(value: "DRAFT")
}

######### Salesbar #########

type SalesBar @model @auth(rules: [{ allow: public }]) {
  id: ID!
  text: String!
  link: String!
  icon: String @default(value: "BoltIcon")
  type: String
}

######### Testimonials #########

type Testimonial @model @auth(rules: [{ allow: public }]) {
  id: ID!
  content: String!
  author: String
  company: String
  affiliation: String
  title: String
  tags: [String]
  linkedin: String
  headshot: String
  featured: Boolean @default(value: "false")
  date: String
  video: String
}

######### Forms #########

type WorkshopForm
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: public }]) {
  firstName: String!
  lastName: String!
  email: String! @index(name: "workshopFormByEmail")
  phone: String
  companyName: String
  eventDate: String
  audienceSize: String
  eventLocation: String
  eventDescription: String
}

######### Tracking #########

type CourseClick @model @auth(rules: [{ allow: public }]) {
  id: ID!
  courseID: String! @index(name: "clicksByCourse")
  page: String
  ipAddress: String
  country: String
  lat: String
  long: String
  referrer: String
  nextPath: String
  format: String
}

type SalesbarClick @model @auth(rules: [{ allow: public }]) {
  id: ID!
  page: String
  ipAddress: String
  country: String
  link: String
}

type LessonClick @model @auth(rules: [{ allow: public }]) {
  id: ID!
  LessonID: String! @index(name: "clicksByLesson")
  page: String
  ipAddress: String
  country: String
  lat: String
  long: String
  referrer: String
  format: String
}

type CourseSearch @model @auth(rules: [{ allow: public }]) {
  id: ID!
  term: String! @index(name: "courseSearchByTerm")
  ipAddress: String
  country: String
}

######### INDIA #########

type Click @model @auth(rules: [{ allow: public }]) {
  id: ID!
  ref: String
  path: String
  type: String
  identifier: String
  nextPath: String
  ipAddress: String
  location: String
}

type IndiaClick @model @auth(rules: [{ allow: public }]) {
  id: ID!
  courseID: String! @index(name: "indiaClicksByCourse")
  page: String
  ipAddress: String
  country: String
  lat: String
  long: String
  referrer: String
  nextPath: String
  format: String
}

type IndiaCourseSearch @model @auth(rules: [{ allow: public }]) {
  id: ID!
  term: String! @index(name: "indiaCourseSearchByTerm")
  ipAddress: String
  country: String
}

######### INDEX TEMPLATES #########

type IndexTemplate @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "indexBySlug")
  title: String!
  subhead: String
  authors: [Author] @manyToMany(relationName: "AuthorTemplates")
  rows: [IndexRow] @manyToMany(relationName: "IndexTemplateRows")
}

type IndexRow @model @auth(rules: [{ allow: public }]) {
  id: ID!
  headline: String
  subhead: String
  type: String
  content: [String]
  templates: [IndexTemplate] @manyToMany(relationName: "IndexTemplateRows")
}
